using namespace std;
#include <stdio.h>
#include <math.h>
#include <iostream>
void clearMemory(double** a, int n) { //Функция освобождения памяти, выделенной под двумерный динамический массив
	for (int i = 0; i < n; i++) {
		delete[] a[i];
	}
	delete[] a;
}
double det(double** a, int n) {
	if (n == 1)
		return a[0][0];
	else if (n == 2)
		return a[0][0] * a[1][1] - a[0][1] * a[1][0];
	else {
		double d = 0;
		for (int k = 0; k < n; k++) {
			double** b = new double* [n - 1];
			for (int i = 0; i < n - 1; i++) {
				b[i] = new double[n - 1];
			}
			for (int i = 1; i < n; i++) {
				for (int j = 0; j < n; j++) {
					if (j == k)
						continue;
					else if (j < k)
						b[i - 1][j] = a[i][j];
					else
						b[i - 1][j - 1] = a[i][j];
				}
			}
			d += pow(-1, k + 2) * a[0][k] * det(b, n - 1);
			clearMemory(b, n - 1);
		}
		return d;
	}
}
int main() {
	// Таблица(общая)
	// A1
	short const M_i[15] = { 24, 24, 22, 24, 12, 12, 12, 12, 12, 12, 12, 12, 16, 12, 12 };
	double const b[15][24] = {
		{ 0.57335704239162, -0.1676068752373, 0.23405291834916, -0.21947376343441, 0.16369201404128, 0.15004406389280, \
	0.98990489492918, 0.58382770929055, -0.7478686756039, 0.30033302857974, 0.20985543806568, -0.18590151133061, -0.15782558339049, \
	0.12716735220791, -0.32019743894346, -0.68049729364536, 0.24291412853736, 0.51440451639444, -0.19084949733532, 0.55229677241291, \
	- 0.44197392976085, 0.40061416708429, -0.33752085907575, -0.25127658213357 }, // 1
		{ 0.59889711801201, -0.1694155748073, 0.24579736191718, -0.23722456755175, 0.17954918715141, 0.14592875720215, \
	0.10008065936206, 0.73157115385532, -0.88372272336366, 0.31887660246708, 0.20766491728799, -0.19379315454158, -0.16936641554983, \
	0.13546846041701, -0.33066712095307, -0.60690817018557, 0.12797548292871, 0.58743664107299, -0.18451951971969, 0.47226622042472, \
	- 0.52024079680599, 0.43563505956635, -0.36251690750939, -0.28974026866543 }, // 2
		{ 0.52646564804653, -0.14995725042592, 0.27329787633782, 0.12949500022786, 0.15404088341841, -0.58186950946814, \
	- 0.18022494838296, -0.95389904072812, -0.80486819317679, -0.3554775127309, -0.28079014882405, -0.82435890081677, 0.10832427979006, \
	- 0.67073993161097, -0.46827907600524, -0.28359911832177, 0.19500174744098, -0.21609137507166, 0.43772794926972, -0.22130790113593, \
	0.1519018995733, -0.153809489533, 0, 0 }, // 3
		{ 0.63596780450714, -0.17377981785459, 0.28914060926272, -0.33714276845694, 0.22405964699561, 0.15715424886913, \
	0.11450634253745, 0.10612049379745, -0.12855224439423, 0.39414630777652, 0.31390924682041, -0.21592277117247, -0.21723666564905, \
	- 0.28999574439489, 0.42321173025732, 0.4643410025926, -0.13138398329741, 0.11492850364368, -0.33387688429909, 0.15183171583644, \
	- 0.47610805647657, 0.46917166277885, -0.39401755804649, -0.32569956247611 }, // 4
		{ 0.10403973107358, -0.28318404081403, 0.84393809606294, -0.76559591850023, 0.94697373057280, 0.24796475497006, 0.27743760422870, \
		-0.43846000648377, -0.26991064784350, -0.69313413089860, -0.29632145981653, 0.14040126751380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 5
		{ 0.10626277411455 -0.28620951828350, 0.88738233403777, -0.12570581155345, 0.10286308708106, 0.25358040602654, 0.32325200233982, \
		-0.37950761057432, -0.32534802014452, -0.79050969051011, -0.20636720547775, 0.57053809334750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 6
		{ 0.10429331589100, -0.28184272548892, 0.86176232397850, -0.10613619452487, 0.98615749302134, 0.23948208682322, 0.30330004856950, \
		- 0.41598156135099, -0.29991937470058, -0.80369342764109, -0.29761373251151, 0.13059630303140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 7
		{ 0.10968643098001, -0.29988888298061, 0.99516886799212, -0.16170708558539, 0.11334460072775, 0.26760595150748, 0.40979881986931, \
		-0.40876423083075, -0.38169482469447, -0.10931956843993, -0.32073223327990, 0.16877016216975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 8
		{ 1.0963, -3.0402, 1.0317, -0.1541, 0.11535, 0.00029809, 0.39571, -0.045881, -0.35804, -0.10107, -0.035484, 0.018156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 9
		{ 0.10553238013661, -0.26120615890629, 0.76613882967260, -0.29770320622459, 0.11879907733358, 0.27922861062617, 0.46347589844105, \
		0.114331969802297, -0.48256968738131, -0.93750558924659, -0.67273247155994, -0.51141583585428, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 10
		{ 0.10543747645262, -0.26500681506144, 0.81730047827543, -0.30451391253428, 0.12253868710800, 0.27266472743928, 0.49865825681670, \
		-0.71432815084176, -0.54236895525450, -0.13801821610756, -0.61595287380011, 0.48602510393022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 11
		{ 0.10722544875633, -0.24632951172003, 0.65386674054928, -0.36324974085628, 0.12713269626764, 0.30713572777930, 0.52656856987540, \
		0.19362862857653, -0.58939426849155, -0.14069963991934, -0.78966330500036, 0.33036597968109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 12
		{ 0.82728408749586, -0.18602220416584, -0.11199009613744, 0.15635753976056, 0.87375844859025, -0.36674403715731, \
	0.53987893432436, 0.10957690214499, 0.53213037828563, 0.13050533930825, -0.41079520434476, 0.14637443344120, -0.55726838623719, \
	- 0.112017741438, -0.66062758068099, 0.46918522004538, 0, 0, 0, 0, 0, 0, 0, 0 }, // 13
		{ 0.87461, -2.0367, 0.21634, -0.050199, 0.066994, 0.00019076, 0.20227, -0.0045348, -0.22230, -0.034714, -0.014885, 0.0074154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 14
		{ 0.88878286369701, -0.24879433312148, 0.59750190775886, 0.96501817061881, 0.71970428712770, 0.22337443000195, 0.18558686391474, \
		-0.38129368035760, -0.15352245383006, -0.26726814910919, -0.25675298677127, 0.95714302123668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 15
	};
	double const t[15][24] = {
		{ 0.125, 1.125, 0.375, 1.125, 0.625, 1.5, 0.625, 2.625, 2.75, 2.125, 2.0, 1.75, 4.50, 4.75, 5.00, 4.00, \
		4.50, 7.50, 14.0, 11.5, 26.0, 28.0, 30.0, 16.0 }, // 1
		{ 0.125, 1.125, 0.375, 1.125, 0.625, 1.5, 0.625, 2.625, 2.75, 2.125, 2.0, 1.75, 4.50, 4.75, 5.00, 4.00, \
		4.50, 7.50, 14.0, 11.5, 26.0, 28.0, 30.0, 16.0 }, // 2
		{ 0.0, 1.25, 1.625, 0.375, 0.375, 1.375, 1.125, 1.375, 0.125, 1.625, 3.75, 3.5, 7.5, 8.0, 6.0, 16.0, 11.0, \
		24.0, 26.0, 28.0, 24.0, 26.0, 0, 0 }, // 3
		{ 0.125, 1.125, 0.375, 1.125, 0.625, 1.5, 0.625, 2.625, 2.75, 2.125, 2.0, 1.75, 4.50, 4.75, 5.00, 4.00, \
		4.50, 7.50, 14.0, 11.5, 26.0, 28.0, 30.0, 16.0 }, // 4
		{ 0.250, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 5
		{ 0.250, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 6
		{ 0.250, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 7
		{ 0.250, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 8
		{ 0.250, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 9
		{ 0.250, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 10
		{ 0.250, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 11
		{ 0.250, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 12
		{ 0.5, 1.25, 1.875, 0.125, 1.5, 1.0, 0.75, 1.5, 0.625, 2.625, 5.0, 4.0, 4.5, 3.0, 4.0, 6.0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 13
		{ 0.250, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 14
		{ 0.250, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 15
	};
	short const r[15][24] = {
		{ 1, 1, 2, 2, 4, 4, 1, 1, 1, 2, 3, 6, 2, 3, 3, 4, 4, 2, 3, 4, 5, 6, 6, 7 }, // 1
		{ 1, 1, 2, 2, 4, 4, 1, 1, 1, 2, 3, 6, 2, 3, 3, 4, 4, 2, 3, 4, 5, 6, 6, 7 }, // 2
		{ 1, 1, 2, 3, 3, 3, 4, 5, 6, 6, 1, 4, 1, 1, 3, 3, 4, 5, 5, 5, 5, 5, 0, 0 }, // 3
		{ 1, 1, 2, 2, 4, 4, 1, 1, 1, 2, 3, 6, 2, 3, 3, 4, 4, 2, 3, 4, 5, 6, 6, 7 }, // 4
		{ 1, 1, 1, 2, 3, 7, 2, 5, 1, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 5
		{ 1, 1, 1, 2, 3, 7, 2, 5, 1, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 6
		{ 1, 1, 1, 2, 3, 7, 2, 5, 1, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 7
		{ 1, 1, 1, 2, 3, 7, 2, 5, 1, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 8
		{ 1, 1, 1, 2, 3, 7, 2, 5, 1, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 9
		{ 1, 1, 1, 2, 3, 7, 2, 5, 1, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 10
		{ 1, 1, 1, 2, 3, 7, 2, 5, 1, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 11
		{ 1, 1, 1, 2, 3, 7, 2, 5, 1, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 12
		{ 1, 1, 1, 2, 2, 3, 4, 1, 5, 5, 1, 2, 4, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, // 13 
		{ 1, 1, 1, 2, 3, 7, 2, 5, 1, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 14
		{ 1, 1, 1, 2, 3, 7, 2, 5, 1, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 15
	};
	short const l[15][24] = {
		{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 6 }, // 1
		{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 6 }, // 2
		{ 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 5, 5, 5, 6, 6, 0, 0 }, // 3
		{ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 6 }, // 4
		{ 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 5
		{ 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 6
		{ 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 7
		{ 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 8
		{ 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 9
		{ 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 10
		{ 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 11
		{ 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 12
		{ 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 }, // 13
		{ 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 14
		{ 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 15
	};
	short const g[15][24] = {
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, // 1
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, // 2
		{ 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0 }, // 3
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, // 4
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 5
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 6
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 7
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 8
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 9
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 10
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 11
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 12
		{ 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0 }, // 13
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 14
		{ 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // 15
	};
	// A2
	double M_ij[15][15];
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++){
				M_ij[i][j] = 0;
		}
	}
	M_ij[0][1] = 9, M_ij[0][2] = 6, M_ij[0][3] = 12, M_ij[0][4] = 9, M_ij[1][2] = 6, M_ij[1][3] = 6, \
		M_ij[0][5] = 10, M_ij[0][6] = 10, M_ij[3][4] = 10, M_ij[3][5] = 10, M_ij[3][6] = 10, M_ij[4][5] = 10, M_ij[4][6] = 10, M_ij[5][6] = 10;
	//c_ijk
	double c_ij[15][15][12];
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) {
			for (int k = 0; k < 12; k++)
				c_ij[i][j][k] = 0;
		}
	}
	c_ij[0][1][0] = -0.98038985517335, c_ij[0][1][1] = 0.42487270143005, c_ij[0][1][2] = -0.34800214576142, c_ij[0][1][3] = -0.13333813013896, c_ij[0][1][4] = -0.11993694974627, \
		c_ij[0][1][5] = 0.69243379775168, c_ij[0][1][6] = -0.31022508148249, c_ij[0][1][7] = 0.24495491753226, c_ij[0][1][8] = 0.22369816716981;
	c_ij[0][2][0] = -0.10859387354942, c_ij[0][2][1] = 0.80228576727389, c_ij[0][2][2] = -0.93303985115717, c_ij[0][2][3] = 0.40989274005848, \
		c_ij[0][2][4] = -0.24338019772494, c_ij[0][2][5] = 0.23855347281124;
	c_ij[0][3][0] = -0.80926050298746, c_ij[0][3][1] = -0.75381925080059, c_ij[0][3][2] = -0.41618768891219, c_ij[0][3][3] = -0.23452173681569, c_ij[0][3][4] = 0.14003840584586, \
		c_ij[0][3][5] = 0.63281744807738, c_ij[0][3][6] = -0.34660425848809, c_ij[0][3][7] = -0.2391874733425, c_ij[0][3][8] = 0.19855255066891, \
		c_ij[0][3][9] = 0.61777746171555, c_ij[0][3][10] = -0.69575358271105, c_ij[0][3][11] = 0.10630185306388;
	c_ij[0][4][0] = 0.13746429958576, c_ij[0][4][1] = -0.74425012129552, c_ij[0][4][2] = -0.45516600213685, c_ij[0][4][3] = -0.54546603350237, c_ij[0][4][4] = 0.23682016824471, \
		c_ij[0][4][5] = 0.18007763721438, c_ij[0][4][6] = -0.44773942932486, c_ij[0][4][7] = 0.19327374888200, c_ij[0][4][8] = -0.30632197804624;
	c_ij[1][2][0] = 0.28661625028399, c_ij[1][2][1] = -0.10919833861247, c_ij[1][2][2] = -0.1137403208227, c_ij[1][2][3] = 0.76580544237358, \
		c_ij[1][2][4] = 0.42638000926819, c_ij[1][2][5] = 0.17673538204534;
	c_ij[1][3][0] = -0.47376518126608, c_ij[1][3][1] = 0.48961193461001, c_ij[1][3][2] = -0.57011062090535, c_ij[1][3][3] = -0.1996682004132, \
		c_ij[1][3][4] = -0.69411103101723, c_ij[1][3][5] = 0.69226192739021;
	c_ij[0][5][0] = 0.25574776844118, c_ij[0][5][1] = -0.79846357136353, c_ij[0][5][2] = 0.47859131465806, c_ij[0][5][3] = -0.73265392369587, c_ij[0][5][4] = 0.13805471345312, \
		c_ij[0][5][5] = 0.28349603476365, c_ij[0][5][6] = -0.49087385940425, c_ij[0][5][7] = -0.10291888921447, c_ij[0][5][8] = 0.11836314681968, c_ij[0][5][9] = 0.55527385721943;
	c_ij[0][6][0] = 0.25574776844118, c_ij[0][6][1] = -0.79846357136353, c_ij[0][6][2] = 0.47859131465806, c_ij[0][6][3] = -0.73265392369587, c_ij[0][6][4] = 0.13805471345312, \
		c_ij[0][6][5] = 0.28349603476365, c_ij[0][6][6] = -0.49087385940425, c_ij[0][6][7] = -0.10291888921447, c_ij[0][6][8] = 0.11836314681968, c_ij[0][6][9] = 0.55527385721943;
	c_ij[3][4][0] = 0.25574776844118, c_ij[3][4][1] = -0.79846357136353, c_ij[3][4][2] = 0.47859131465806, c_ij[3][4][3] = -0.73265392369587, c_ij[3][4][4] = 0.13805471345312, \
		c_ij[3][4][5] = 0.28349603476365, c_ij[3][4][6] = -0.49087385940425, c_ij[3][4][7] = -0.10291888921447, c_ij[3][4][8] = 0.11836314681968, c_ij[3][4][9] = 0.55527385721943;
	c_ij[3][5][0] = 0.25574776844118, c_ij[3][5][1] = -0.79846357136353, c_ij[3][5][2] = 0.47859131465806, c_ij[3][5][3] = -0.73265392369587, c_ij[3][5][4] = 0.13805471345312, \
		c_ij[3][5][5] = 0.28349603476365, c_ij[3][5][6] = -0.49087385940425, c_ij[3][5][7] = -0.10291888921447, c_ij[3][5][8] = 0.11836314681968, c_ij[3][5][9] = 0.55527385721943;
	c_ij[3][6][0] = 0.25574776844118, c_ij[3][6][1] = -0.79846357136353, c_ij[3][6][2] = 0.47859131465806, c_ij[3][6][3] = -0.73265392369587, c_ij[3][6][4] = 0.13805471345312, \
		c_ij[3][6][5] = 0.28349603476365, c_ij[3][6][6] = -0.49087385940425, c_ij[3][6][7] = -0.10291888921447, c_ij[3][6][8] = 0.11836314681968, c_ij[3][6][9] = 0.55527385721943;
	c_ij[4][5][0] = 0.25574776844118, c_ij[4][5][1] = -0.79846357136353, c_ij[4][5][2] = 0.47859131465806, c_ij[4][5][3] = -0.73265392369587, c_ij[4][5][4] = 0.13805471345312, \
		c_ij[4][5][5] = 0.28349603476365, c_ij[4][5][6] = -0.49087385940425, c_ij[4][5][7] = -0.10291888921447, c_ij[4][5][8] = 0.11836314681968, c_ij[4][5][9] = 0.55527385721943;
	c_ij[4][6][0] = 0.25574776844118, c_ij[4][6][1] = -0.79846357136353, c_ij[4][6][2] = 0.47859131465806, c_ij[4][6][3] = -0.73265392369587, c_ij[4][6][4] = 0.13805471345312, \
		c_ij[4][6][5] = 0.28349603476365, c_ij[4][6][6] = -0.49087385940425, c_ij[4][6][7] = -0.10291888921447, c_ij[4][6][8] = 0.11836314681968, c_ij[4][6][9] = 0.55527385721943;
	c_ij[5][6][0] = 0.25574776844118, c_ij[5][6][1] = -0.79846357136353, c_ij[5][6][2] = 0.47859131465806, c_ij[5][6][3] = -0.73265392369587, c_ij[5][6][4] = 0.13805471345312, \
		c_ij[5][6][5] = 0.28349603476365, c_ij[5][6][6] = -0.49087385940425, c_ij[5][6][7] = -0.10291888921447, c_ij[5][6][8] = 0.11836314681968, c_ij[5][6][9] = 0.55527385721943;

for (int k = 0; k < 12; k++) {
		for (int i = 0; i < 15; i++) {
			for (int j = 0; j < 15; j++)
				c_ij[j][i][k] = c_ij[i][j][k];
		}
	}
	//t_ijk
	double t_ij[15][15][12];
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) {
			for (int k = 0; k < 12; k++)
				t_ij[i][j][k] = 0;
		}
	}
	t_ij[0][1][0] = 0.0, t_ij[0][1][1] = 1.85, t_ij[0][1][2] = 7.85, t_ij[0][1][3] = 5.4, t_ij[0][1][4] = 0.0, t_ij[0][1][5] = 0.75, \
		t_ij[0][1][6] = 2.8, t_ij[0][1][7] = 4.45, t_ij[0][1][8] = 4.25;
	t_ij[0][2][0] = 2.6, t_ij[0][2][1] = 1.95, t_ij[0][2][2] = 0.0, t_ij[0][2][3] = 3.95, t_ij[0][2][4] = 7.95, t_ij[0][2][5] = 8.0;
	t_ij[0][3][0] = 0.65, t_ij[0][3][1] = 1.55, t_ij[0][3][2] = 3.1, t_ij[0][3][3] = 5.9, t_ij[0][3][4] = 7.05, t_ij[0][3][5] = 3.35, \
		t_ij[0][3][6] = 1.2, t_ij[0][3][7] = 5.8, t_ij[0][3][8] = 2.7, t_ij[0][3][9] = 0.45, t_ij[0][3][10] = 0.55, t_ij[0][3][11] = 1.95;
	t_ij[0][4][0] = 1.85, t_ij[0][4][1] = 3.95, t_ij[0][4][2] = 0.0, t_ij[0][4][3] = 1.85, t_ij[0][4][4] = 3.85, t_ij[0][4][5] = 5.25, \
		t_ij[0][4][6] = 3.85, t_ij[0][4][7] = 0.2, t_ij[0][4][8] = 6.5;
	t_ij[1][2][0] = 1.85, t_ij[1][2][1] = 1.4, t_ij[1][2][2] = 3.2, t_ij[1][2][3] = 2.5, t_ij[1][2][4] = 8.0, t_ij[1][2][5] = 3.75;
	t_ij[1][3][0] = 0.0, t_ij[1][3][1] = 0.05, t_ij[1][3][2] = 0.0, t_ij[1][3][3] = 3.65, t_ij[1][3][4] = 4.9, t_ij[1][3][5] = 4.45;
	t_ij[0][5][0] = 1.0, t_ij[0][5][1] = 1.55, t_ij[0][5][2] = 1.7, t_ij[0][5][3] = 0.25, t_ij[0][5][4] = 1.35, t_ij[0][5][5] = 0.0, \
		t_ij[0][5][6] = 1.25, t_ij[0][5][7] = 0.0, t_ij[0][5][8] = 0.7, t_ij[0][5][9] = 5.4;
	t_ij[0][6][0] = 1.0, t_ij[0][6][1] = 1.55, t_ij[0][6][2] = 1.7, t_ij[0][6][3] = 0.25, t_ij[0][6][4] = 1.35, t_ij[0][6][5] = 0.0, \
		t_ij[0][6][6] = 1.25, t_ij[0][6][7] = 0.0, t_ij[0][6][8] = 0.7, t_ij[0][6][9] = 5.4;
	t_ij[3][4][0] = 1.0, t_ij[3][4][1] = 1.55, t_ij[3][4][2] = 1.7, t_ij[3][4][3] = 0.25, t_ij[3][4][4] = 1.35, t_ij[3][4][5] = 0.0, \
		t_ij[3][4][6] = 1.25, t_ij[3][4][7] = 0.0, t_ij[3][4][8] = 0.7, t_ij[3][4][9] = 5.4;
	t_ij[3][5][0] = 1.0, t_ij[3][5][1] = 1.55, t_ij[3][5][2] = 1.7, t_ij[3][5][3] = 0.25, t_ij[3][5][4] = 1.35, t_ij[3][5][5] = 0.0, \
		t_ij[3][5][6] = 1.25, t_ij[3][5][7] = 0.0, t_ij[3][5][8] = 0.7, t_ij[3][5][9] = 5.4;
	t_ij[3][6][0] = 1.0, t_ij[3][6][1] = 1.55, t_ij[3][6][2] = 1.7, t_ij[3][6][3] = 0.25, t_ij[3][6][4] = 1.35, t_ij[3][6][5] = 0.0, \
		t_ij[3][6][6] = 1.25, t_ij[3][6][7] = 0.0, t_ij[3][6][8] = 0.7, t_ij[3][6][9] = 5.4;
	t_ij[4][5][0] = 1.0, t_ij[4][5][1] = 1.55, t_ij[4][5][2] = 1.7, t_ij[4][5][3] = 0.25, t_ij[4][5][4] = 1.35, t_ij[4][5][5] = 0.0, \
		t_ij[4][5][6] = 1.25, t_ij[4][5][7] = 0.0, t_ij[4][5][8] = 0.7, t_ij[4][5][9] = 5.4;
	t_ij[4][6][0] = 1.0, t_ij[4][6][1] = 1.55, t_ij[4][6][2] = 1.7, t_ij[4][6][3] = 0.25, t_ij[4][6][4] = 1.35, t_ij[4][6][5] = 0.0, \
		t_ij[4][6][6] = 1.25, t_ij[4][6][7] = 0.0, t_ij[4][6][8] = 0.7, t_ij[4][6][9] = 5.4;
	t_ij[5][6][0] = 1.0, t_ij[5][6][1] = 1.55, t_ij[5][6][2] = 1.7, t_ij[5][6][3] = 0.25, t_ij[5][6][4] = 1.35, t_ij[5][6][5] = 0.0, \
		t_ij[5][6][6] = 1.25, t_ij[5][6][7] = 0.0, t_ij[5][6][8] = 0.7, t_ij[5][6][9] = 5.4;
	for (int k = 0; k < 12; k++) {
		for (int i = 0; i < 15; i++) {
			for (int j = 0; j < 15; j++)
				t_ij[j][i][k] = t_ij[i][j][k];
		}
	}
	//r_ijk
	double r_ij[15][15][12];
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) {
			for (int k = 0; k < 12; k++)
				r_ij[i][j][k] = 0;
		}
	}
	r_ij[0][1][0] = 1.0, r_ij[0][1][1] = 4.0, r_ij[0][1][2] = 1.0, r_ij[0][1][3] = 2.0, r_ij[0][1][4] = 2.0, r_ij[0][1][5] = 2.0, \
		r_ij[0][1][6] = 2.0, r_ij[0][1][7] = 2.0, r_ij[0][1][8] = 3.0;
	r_ij[0][2][0] = 1.0, r_ij[0][2][1] = 2.0, r_ij[0][2][2] = 3.0, r_ij[0][2][3] = 1.0, r_ij[0][2][4] = 2.0, r_ij[0][2][5] = 3.0;
	r_ij[0][3][0] = 3.0, r_ij[0][3][1] = 4.0, r_ij[0][3][2] = 1.0, r_ij[0][3][3] = 2.0, r_ij[0][3][4] = 2.0, r_ij[0][3][5] = 2.0, \
		r_ij[0][3][6] = 2.0, r_ij[0][3][7] = 2.0, r_ij[0][3][8] = 2.0, r_ij[0][3][9] = 3.0, r_ij[0][3][10] = 3.0, r_ij[0][3][11] = 3.0;
	r_ij[0][4][0] = 3.0, r_ij[0][4][1] = 3.0, r_ij[0][4][2] = 4.0, r_ij[0][4][3] = 4.0, r_ij[0][4][4] = 4.0, r_ij[0][4][5] = 1.0, \
		r_ij[0][4][6] = 1.0, r_ij[0][4][7] = 1.0, r_ij[0][4][8] = 2.0;
	r_ij[1][2][0] = 2.0, r_ij[1][2][1] = 3.0, r_ij[1][2][2] = 1.0, r_ij[1][2][3] = 1.0, r_ij[1][2][4] = 1.0, r_ij[1][2][5] = 2.0;
	r_ij[1][3][0] = 2.0, r_ij[1][3][1] = 2.0, r_ij[1][3][2] = 3.0, r_ij[1][3][3] = 1.0, r_ij[1][3][4] = 2.0, r_ij[1][3][5] = 2.0;
	r_ij[0][5][0] = 1.0, r_ij[0][5][1] = 1.0, r_ij[0][5][2] = 1.0, r_ij[0][5][3] = 2.0, r_ij[0][5][4] = 2.0, r_ij[0][5][5] = 3.0, \
		r_ij[0][5][6] = 3.0, r_ij[0][5][7] = 4.0, r_ij[0][5][8] = 4.0, r_ij[0][5][9] = 4.0;
	r_ij[0][6][0] = 1.0, r_ij[0][6][1] = 1.0, r_ij[0][6][2] = 1.0, r_ij[0][6][3] = 2.0, r_ij[0][6][4] = 2.0, r_ij[0][6][5] = 3.0, \
		r_ij[0][6][6] = 3.0, r_ij[0][6][7] = 4.0, r_ij[0][6][8] = 4.0, r_ij[0][6][9] = 4.0;
	r_ij[3][4][0] = 1.0, r_ij[3][4][1] = 1.0, r_ij[3][4][2] = 1.0, r_ij[3][4][3] = 2.0, r_ij[3][4][4] = 2.0, r_ij[3][4][5] = 3.0, \
		r_ij[3][4][6] = 3.0, r_ij[3][4][7] = 4.0, r_ij[3][4][8] = 4.0, r_ij[3][4][9] = 4.0;
	r_ij[3][5][0] = 1.0, r_ij[3][5][1] = 1.0, r_ij[3][5][2] = 1.0, r_ij[3][5][3] = 2.0, r_ij[3][5][4] = 2.0, r_ij[3][5][5] = 3.0, \
		r_ij[3][5][6] = 3.0, r_ij[3][5][7] = 4.0, r_ij[3][5][8] = 4.0, r_ij[3][5][9] = 4.0;
	r_ij[3][6][0] = 1.0, r_ij[3][6][1] = 1.0, r_ij[3][6][2] = 1.0, r_ij[3][6][3] = 2.0, r_ij[3][6][4] = 2.0, r_ij[3][6][5] = 3.0, \
		r_ij[3][6][6] = 3.0, r_ij[3][6][7] = 4.0, r_ij[3][6][8] = 4.0, r_ij[3][6][9] = 4.0;
	r_ij[4][5][0] = 1.0, r_ij[4][5][1] = 1.0, r_ij[4][5][2] = 1.0, r_ij[4][5][3] = 2.0, r_ij[4][5][4] = 2.0, r_ij[4][5][5] = 3.0, \
		r_ij[4][5][6] = 3.0, r_ij[4][5][7] = 4.0, r_ij[4][5][8] = 4.0, r_ij[4][5][9] = 4.0;
	r_ij[4][6][0] = 1.0, r_ij[4][6][1] = 1.0, r_ij[4][6][2] = 1.0, r_ij[4][6][3] = 2.0, r_ij[4][6][4] = 2.0, r_ij[4][6][5] = 3.0, \
		r_ij[4][6][6] = 3.0, r_ij[4][6][7] = 4.0, r_ij[4][6][8] = 4.0, r_ij[4][6][9] = 4.0;
	r_ij[5][6][0] = 1.0, r_ij[5][6][1] = 1.0, r_ij[5][6][2] = 1.0, r_ij[5][6][3] = 2.0, r_ij[5][6][4] = 2.0, r_ij[5][6][5] = 3.0, \
		r_ij[5][6][6] = 3.0, r_ij[5][6][7] = 4.0, r_ij[5][6][8] = 4.0, r_ij[5][6][9] = 4.0;
	for (int k = 0; k < 12; k++) {
		for (int i = 0; i < 15; i++) {
			for (int j = 0; j < 15; j++)
				r_ij[j][i][k] = r_ij[i][j][k];
		}
	}
	//alpha_ijk
	double alpha_ij[15][15][12];
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) {
			for (int k = 0; k < 12; k++)
				alpha_ij[i][j][k] = 0;
		}
	}
	alpha_ij[0][1][2] = 1.0, alpha_ij[0][1][3] = 1.0, alpha_ij[0][1][4] = 0.25;
	alpha_ij[0][2][3] = 1.0, alpha_ij[0][2][4] = 0.5;
	alpha_ij[0][3][2] = 1.0, alpha_ij[0][3][3] = 1.0, alpha_ij[0][3][4] = 1.0, alpha_ij[0][3][5] = 0.875, alpha_ij[0][3][6] = 0.75, alpha_ij[0][3][7] = 0.5;
	alpha_ij[0][4][5] = 0.25, alpha_ij[0][4][6] = 0.25;
	alpha_ij[1][2][2] = 0.25, alpha_ij[1][2][3] = 0.25;
	alpha_ij[1][3][3] = 1.0, alpha_ij[1][3][4] = 1.0, alpha_ij[1][3][5] = 0.875;
	for (int k = 0; k < 12; k++) {
		for (int i = 0; i < 15; i++) {
			for (int j = 0; j < 15; j++)
				alpha_ij[j][i][k] = alpha_ij[i][j][k];
		}
	}
	//eps_ijk
	double eps_ij[15][15][12];
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) {
			for (int k = 0; k < 12; k++)
				eps_ij[i][j][k] = 0;
		}
	}
	eps_ij[0][1][2] = 0.5, eps_ij[0][1][3] = 0.5, eps_ij[0][1][4] = 0.5, eps_ij[0][1][5] = 0.5, eps_ij[0][1][6] = 0.5, eps_ij[0][1][7] = 0.5, eps_ij[0][1][8] = 0.5;
	eps_ij[0][2][3] = 0.5, eps_ij[0][2][4] = 0.5, eps_ij[0][2][5] = 0.5;
	eps_ij[0][3][2] = 0.5, eps_ij[0][3][3] = 0.5, eps_ij[0][3][4] = 0.5, eps_ij[0][3][5] = 0.5, eps_ij[0][3][6] = 0.5, eps_ij[0][3][7] = 0.5, eps_ij[0][3][8] = 0.5, \
		eps_ij[0][3][9] = 0.5, eps_ij[0][3][10] = 0.5, eps_ij[0][3][11] = 0.5;
	eps_ij[0][4][5] = 0.5, eps_ij[0][4][6] = 0.5, eps_ij[0][4][7] = 0.5, eps_ij[0][4][8] = 0.5;
	eps_ij[1][2][2] = 0.5, eps_ij[1][2][3] = 0.5, eps_ij[1][2][4] = 0.5, eps_ij[1][2][5] = 0.5;
	eps_ij[1][3][3] = 0.5, eps_ij[1][3][4] = 0.5, eps_ij[1][3][5] = 0.5;
	for (int k = 0; k < 12; k++) {
		for (int i = 0; i < 15; i++) {
			for (int j = 0; j < 15; j++)
				eps_ij[j][i][k] = eps_ij[i][j][k];
		}
	}
	//beta_ijk
	double beta_ij[15][15][12];
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) {
			for (int k = 0; k < 12; k++)
				beta_ij[i][j][k] = 0;
		}
	}
	beta_ij[0][1][2] = 1.0, beta_ij[0][1][3] = 1.0, beta_ij[0][1][4] = 2.5, beta_ij[0][1][5] = 3.0, beta_ij[0][1][6] = 3.0, beta_ij[0][1][7] = 3.0, beta_ij[0][1][8] = 3.0;
	beta_ij[0][2][3] = 1.0, beta_ij[0][2][4] = 2.0, beta_ij[0][2][5] = 3.0;
	beta_ij[0][3][2] = 1.0, beta_ij[0][3][3] = 1.0, beta_ij[0][3][4] = 1.0, beta_ij[0][3][5] = 1.25, beta_ij[0][3][6] = 1.5, beta_ij[0][3][7] = 2.0, beta_ij[0][3][8] = 3.0, \
		beta_ij[0][3][9] = 3.0, beta_ij[0][3][10] = 3.0, beta_ij[0][3][11] = 3.0;
	beta_ij[0][4][5] = 0.75, beta_ij[0][4][6] = 1.0, beta_ij[0][4][7] = 2.0, beta_ij[0][4][8] = 3.0;
	beta_ij[1][2][2] = 0.75, beta_ij[1][2][3] = 1.0, beta_ij[1][2][4] = 2.0, beta_ij[1][2][5] = 3.0;
	beta_ij[1][3][3] = 1.0, beta_ij[1][3][4] = 1.0, beta_ij[1][3][5] = 1.25;
	for (int k = 0; k < 12; k++) {
		for (int i = 0; i < 15; i++) {
			for (int j = 0; j < 15; j++)
				beta_ij[j][i][k] = beta_ij[i][j][k];
		}
	}
	//gamma_ijk(the same as eps)
	double gamma_ij[15][15][12];
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) {
			for (int k = 0; k < 12; k++)
				gamma_ij[i][j][k] = 0;
		}
	}
	gamma_ij[0][1][2] = 0.5, gamma_ij[0][1][3] = 0.5, gamma_ij[0][1][4] = 0.5, gamma_ij[0][1][5] = 0.5, gamma_ij[0][1][6] = 0.5, gamma_ij[0][1][7] = 0.5, gamma_ij[0][1][8] = 0.5;
	gamma_ij[0][2][3] = 0.5, gamma_ij[0][2][4] = 0.5, gamma_ij[0][2][5] = 0.5;
	gamma_ij[0][3][2] = 0.5, gamma_ij[0][3][3] = 0.5, gamma_ij[0][3][4] = 0.5, gamma_ij[0][3][5] = 0.5, gamma_ij[0][3][6] = 0.5, gamma_ij[0][3][7] = 0.5, \
		gamma_ij[0][3][8] = 0.5, gamma_ij[0][3][9] = 0.5, gamma_ij[0][3][10] = 0.5, gamma_ij[0][3][11] = 0.5;
	gamma_ij[0][4][5] = 0.5, gamma_ij[0][4][6] = 0.5, gamma_ij[0][4][7] = 0.5, gamma_ij[0][4][8] = 0.5;
	gamma_ij[1][2][2] = 0.5, gamma_ij[1][2][3] = 0.5, gamma_ij[1][2][4] = 0.5, gamma_ij[1][2][5] = 0.5;
	gamma_ij[1][3][3] = 0.5, gamma_ij[1][3][4] = 0.5, gamma_ij[1][3][5] = 0.5;
	for (int k = 0; k < 12; k++) {
		for (int i = 0; i < 15; i++) {
			for (int j = 0; j < 15; j++)
				gamma_ij[j][i][k] = gamma_ij[i][j][k];
		}
	}
	//
	// A3 (Таблица для Psi_ij)
	double Psi[15][15]; // таблица для Psi(симметричная)
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++)
			Psi[j][i] = 0;
	}
	Psi[0][1] = 1, Psi[0][2] = 1, Psi[0][3] = 1, Psi[0][4] = 1, Psi[0][5] = 1, Psi[0][6] = 0.771035405688, Psi[1][2] = 1, Psi[1][3] = 1, \
		Psi[3][4] = 0.130424765150, Psi[3][5] = 0.281570073085, Psi[3][6] = 0.260632376098, Psi[4][5] = 0.312572600489, \
		Psi[4][6] = -0.551609771024, Psi[5][6] = -0.551240293009;
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++)
			Psi[j][i] = Psi[i][j];
	}
	// A4 (характерные параметры для газов, 1 - фактор Питцера, 2 - критическая плотность, 3 - критическая температура, 4 - Молярная масса)
	double const Array[15][4] = {  // общая
	{0.064294, 10.139342719, 190.564, 16.04246}, // Метан
	{0.013592, 11.1839, 126.192, 28.0134}, // Азот
	{0.20625, 10.624978698, 304.1282, 44.0095}, // Диоксид углерода
	{0.10958, 6.870854540, 305.322, 30.06904}, // Этан
	{0.18426, 5.000043088, 369.825, 44.09562}, // Пропан
	{0.21340, 3.920016792, 425.125, 58.1222}, // n-Бутан
	{0.16157, 3.860142940, 407.817, 58.1222}, // i-Бутан
	{0.29556, 3.215577588, 469.700, 72.14878}, // n-Пентан
	{0.26196, 3.271, 460.350, 72.14878}, // i-Пентан
	{0.29965, 2.705877875, 507.820, 86.17536}, // Гексан
	{0.39405, 2.315324434, 540.130, 100.20194}, // Гептан
	{0.42947, 2.056404127, 569.320, 114.22852}, // Октан
	{0.76949, 17.87371609, 647.096, 18.01528}, // Водяной пар
	{0.064338, 10.19, 373.1, 34.08088}, // Сероводород
	{0.039513, 13.63, 154.595, 31.9988} // Кислород
	};
	// A5
	double beta_T[15][15];
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++)
			beta_T[j][i] = 1.0;
	}
	beta_T[0][1] = 0.99809883, beta_T[0][2] = 1.02262449, beta_T[0][3] = 0.996336508, beta_T[0][4] = 0.989680305, beta_T[0][5] = 0.99417491, \
		beta_T[0][6] = 0.980315756, beta_T[0][7] = 0.992127525, beta_T[0][9] = 0.981844797, beta_T[0][10] = 0.977431529, \
		beta_T[0][11] = 0.957473785, beta_T[0][12] = 1.687364, beta_T[0][13] = 1.011090031;
	beta_T[1][2] = 1.005894529, beta_T[1][3] = 1.007671428, beta_T[1][4] = 1.002677329, beta_T[1][5] = 0.994515234, beta_T[1][6] = 0.99286813, \
		beta_T[1][12] = 2.325491, beta_T[1][13] = 1.004692366, beta_T[1][14] = 0.997190589;
	beta_T[2][3] = 1.013871147, beta_T[2][4] = 1.033620538, beta_T[2][5] = 1.018171004, beta_T[2][6] = 1.023339824, beta_T[2][7] = 1.027000795, \
		beta_T[2][8] = 1.019180957, beta_T[2][10] = 1.011806317, beta_T[2][11] = 1.02969078, beta_T[2][12] = 1.675020, beta_T[2][13] = 1.016034583;
	beta_T[3][4] = 0.996199694, beta_T[3][5] = 0.999130554, beta_T[3][7] = 0.998688946, beta_T[3][11] = 0.984068272, beta_T[3][12] = 1.141696, \
		beta_T[3][13] = 0.990197354;
	beta_T[4][5] = 1.000310289, beta_T[4][6] = 0.998012298, beta_T[4][7] = 0.996484021, beta_T[4][8] = 0.994364425, beta_T[4][12] = 1.101761, \
		beta_T[4][13] = 0.992573556;
	beta_T[5][6] = 1.000077547, beta_T[5][12] = 0.9732713, beta_T[5][13] = 0.985962886;
	beta_T[6][13] = 0.974550548;
	beta_T[7][13] = 0.962006651;
	beta_T[9][13] = 0.985891113;
	beta_T[10][13] = 0.988937417;
	beta_T[12][13] = 0.7698974;
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++)
			beta_T[j][i] = 1/beta_T[i][j];
	}
	//
	double gamma_T[15][15];
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++)
			gamma_T[j][i] = 1.0;
	}
	gamma_T[0][1] = 0.979273013, gamma_T[0][2] = 0.975665369, gamma_T[0][3] = 1.049707697, gamma_T[0][4] = 1.098655531, gamma_T[0][5] = 1.171607691, \
		gamma_T[0][6] = 1.161117729, gamma_T[0][7] = 1.249173968, gamma_T[0][8] = 1.188899743, gamma_T[0][9] = 1.330570181, \
		gamma_T[0][10] = 1.379850328, gamma_T[0][11] = 1.449245409, gamma_T[0][12] = 1.115752, gamma_T[0][13] = 0.961155729, gamma_T[0][14] = 0.95;
	gamma_T[1][2] = 1.107654104, gamma_T[1][3] = 1.098650964, gamma_T[1][4] = 1.201264026, gamma_T[1][5] = 1.304886838, gamma_T[1][6] = 1.284462634, \
		gamma_T[1][7] = 1.419029041, gamma_T[1][8] = 1.38177077, gamma_T[1][9] = 1.472607971, gamma_T[1][10] = 1.520975334, \
		gamma_T[1][11] = 1.733280051, gamma_T[1][12] = 1.594913, gamma_T[1][13] = 0.9601742, gamma_T[1][14] = 0.995157044;
	gamma_T[2][3] = 0.90094953, gamma_T[2][4] = 0.908772477, gamma_T[2][5] = 0.911498231, gamma_T[2][6] = 0.929982936, gamma_T[2][7] = 0.979217302, \
		gamma_T[2][8] = 0.961218039, gamma_T[2][9] = 1.038675574, gamma_T[2][10] = 1.046169823, gamma_T[2][11] = 1.074455386, \
		gamma_T[2][12] = 1.365176, gamma_T[2][13] = 0.92601888;
	gamma_T[3][4] = 1.01473019, gamma_T[3][5] = 1.034832749, gamma_T[3][6] = 1.033283811, gamma_T[3][7] = 1.066665676, gamma_T[3][8] = 1.021150247, \
		gamma_T[3][9] = 1.092177796, gamma_T[3][10] = 1.134532014, gamma_T[3][11] = 1.168636194, gamma_T[3][12] = 0.7145980, gamma_T[3][13] = 0.90273666;
	gamma_T[4][5] = 1.007392782, gamma_T[4][6] = 1.005250774, gamma_T[4][7] = 1.008344412, gamma_T[4][8] = 1.0032695, gamma_T[4][9] = 1.025657518, \
		gamma_T[4][10] = 1.050044169, gamma_T[4][11] = 1.063694129, gamma_T[4][12] = 0.7150612, gamma_T[4][13] = 0.905829247;
	gamma_T[5][6] = 1.001432824, gamma_T[5][7] = 1.00214364, gamma_T[5][8] = 1.000792201, gamma_T[5][9] = 1.00915706, gamma_T[5][10] = 1.021283378, \
		gamma_T[5][11] = 1.033180106, gamma_T[5][12] = 0.6251234, gamma_T[5][13] = 0.926156602;
	gamma_T[6][7] = 1.002495889, gamma_T[6][8] = 1.001835788, gamma_T[6][9] = 1.006018054, gamma_T[6][10] = 1.00988576, \
		gamma_T[6][11] = 1.013945424, gamma_T[6][13] = 0.937130844;
	gamma_T[7][8] = 1.000050537, gamma_T[7][9] = 1.000761237, gamma_T[7][10] = 1.002441051, gamma_T[7][11] = 1.016422347, \
		gamma_T[7][12] = 0.447666011, gamma_T[7][13] = 0.959065662;
	gamma_T[8][9] = 1.001204174, gamma_T[8][10] = 1.003194615, gamma_T[8][11] = 1.00564748, gamma_T[8][13] = 0.982651529;
	gamma_T[9][10] = 0.999762786, gamma_T[9][11] = 1.001633952, gamma_T[9][12] = 0.569681333, gamma_T[9][13] = 0.956075596;
	gamma_T[10][11] = 0.998793111, gamma_T[10][13] = 1.013453092;
	gamma_T[11][12] = 0.662072469;
	gamma_T[12][13] = 1.047424, gamma_T[12][14] = 0.964767932;
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++)
			gamma_T[j][i] = gamma_T[i][j];
	}
	//
	double beta_v[15][15]; 
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++)
			beta_v[j][i] = 1.0;
	}
	beta_v[0][1] = 0.998721377, beta_v[0][2] = 0.999518072, beta_v[0][3] = 0.997547866, beta_v[0][4] = 1.00482707, beta_v[0][5] = 0.979105972, \
		beta_v[0][6] = 1.011240388, beta_v[0][7] = 0.94833012, beta_v[0][9] = 0.958015294, beta_v[0][10] = 0.962050831, beta_v[0][11] = 0.994740603, \
		beta_v[0][12] = 0.8567304, beta_v[0][13] = 1.012599087;
	beta_v[1][2] = 0.977794634, beta_v[1][3] = 0.978880168, beta_v[1][4] = 0.974424681, beta_v[1][5] = 0.99608261, beta_v[1][6] = 0.98641583, \
		beta_v[1][12] = 0.7627175, beta_v[1][13] = 0.910394249, beta_v[1][14] = 0.99952177;
	beta_v[2][3] = 1.002525718, beta_v[2][4] = 0.996898004, beta_v[2][5] = 1.174760923, beta_v[2][6] = 1.076551882, beta_v[2][7] = 1.024311498, \
		beta_v[2][8] = 1.060793104, beta_v[2][10] = 1.205469976, beta_v[2][11] = 1.026169373, beta_v[2][12] = 0.3465759, beta_v[2][13] = 0.906630564; \
	beta_v[3][4] = 0.997607277, beta_v[3][5] = 0.999157205, beta_v[3][7] = 0.993851009, beta_v[3][11] = 1.007469726, \
		beta_v[3][12] = 0.7260914, beta_v[3][13] = 1.010817909;
	beta_v[4][5] = 0.999795868, beta_v[4][6] = 0.999243146, beta_v[4][7] = 1.044919431, beta_v[4][8] = 1.040459289, beta_v[4][12] = 0.6238888, \
		beta_v[4][13] = 0.936811219;
	beta_v[5][6] = 1.000880464, beta_v[5][12] = 0.5239402, beta_v[5][13] = 0.908113163;
	beta_v[6][13] = 1.012994431;
	beta_v[7][13] = 0.984613203;
	beta_v[9][13] = 0.754473958;
	beta_v[10][13] = 0.828967164;
	beta_v[12][13] = 1.599782;
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++)
			beta_v[j][i] = 1 / beta_v[i][j];
	}
	//
	double gamma_v[15][15];
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++)
			gamma_v[j][i] = 1.0;
	}
	gamma_v[0][1] = 1.013950311, gamma_v[0][2] = 1.002806594, gamma_v[0][3] = 1.006617867, gamma_v[0][4] = 1.038470657, gamma_v[0][5] = 1.045375122, \
		gamma_v[0][6] = 1.054319053, gamma_v[0][7] = 1.124508039, gamma_v[0][8] = 1.343685343, gamma_v[0][9] = 1.052643846, \
		gamma_v[0][10] = 1.156655935, gamma_v[0][11] = 1.116549372, gamma_v[0][12] = 0.9636890, gamma_v[0][13] = 1.040161207;
	gamma_v[1][2] = 1.047578256, gamma_v[1][3] = 1.042352891, gamma_v[1][4] = 1.081025408, gamma_v[1][5] = 1.146949309, gamma_v[1][6] = 1.100576129, \
		gamma_v[1][7] = 1.078877166, gamma_v[1][8] = 1.154135439, gamma_v[1][9] = 1.195952177, gamma_v[1][10] = 1.40455409, \
		gamma_v[1][11] = 1.186067025, gamma_v[1][12] = 0.7846311, gamma_v[1][13] = 1.256844157, gamma_v[1][14] = 0.997082328;
	gamma_v[2][3] = 1.032876701, gamma_v[2][4] = 1.047596298, gamma_v[2][5] = 1.222437324, gamma_v[2][6] = 1.081909003, gamma_v[2][7] = 1.068406078, \
		gamma_v[2][8] = 1.116793198, gamma_v[2][9] = 0.851343711, gamma_v[2][10] = 1.164585914, gamma_v[2][11] = 1.104043935, \
		gamma_v[2][12] = 0.4393211, gamma_v[2][13] = 1.024085837;
	gamma_v[3][4] = 1.00303472, gamma_v[3][5] = 1.006179146, gamma_v[3][6] = 1.006616886, gamma_v[3][7] = 1.026085655, gamma_v[3][8] = 1.045439935, \
		gamma_v[3][9] = 1.169701102, gamma_v[3][10] = 1.057666085, gamma_v[3][11] = 1.071917985, gamma_v[3][12] = 0.9103919, gamma_v[3][13] = 1.030988277;
	gamma_v[4][5] = 1.003264179, gamma_v[4][6] = 1.001156119, gamma_v[4][7] = 1.019921513, gamma_v[4][8] = 0.999432118, gamma_v[4][9] = 1.057872566, \
		gamma_v[4][10] = 1.079648053, gamma_v[4][11] = 1.102764612, gamma_v[4][12] = 0.6085248, gamma_v[4][13] = 1.010593999;
	gamma_v[5][6] = 1.00041444, gamma_v[5][7] = 1.01815965, gamma_v[5][8] = 1.002728434, gamma_v[5][9] = 1.034995284, gamma_v[5][10] = 1.019174227, \
		gamma_v[5][11] = 1.046905515, gamma_v[5][12] = 0.7651517, gamma_v[5][13] = 1.033366041;
	gamma_v[6][7] = 1.002779804, gamma_v[6][8] = 1.002284353, gamma_v[6][9] = 1.010493989, gamma_v[6][10] = 1.021668316, \
		gamma_v[6][11] = 1.032807063, gamma_v[6][13] = 0.988591117;
	gamma_v[7][8] = 1.000024335, gamma_v[7][9] = 1.002480637, gamma_v[7][10] = 1.008972412, gamma_v[7][11] = 1.069223964, \
		gamma_v[7][12] = 0.95667731, gamma_v[7][13] = 1.076539234;
	gamma_v[8][9] = 1.002995876, gamma_v[8][10] = 1.009928206, gamma_v[8][11] = 1.017880545, gamma_v[8][13] = 0.835763343;
	gamma_v[9][10] = 1.001508227, gamma_v[9][11] = 1.006268954, gamma_v[9][12] = 1.170217596, gamma_v[9][13] = 1.339283552;
	gamma_v[10][11] = 1.006767176, gamma_v[10][13] = 1.087956749;
	gamma_v[11][12] = 0.599484191;
	gamma_v[12][13] = 0.8943467, gamma_v[12][14] = 1.143174289;
	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++)
			gamma_v[j][i] = gamma_v[i][j];
	}
	// A6
	double a_0i[15] = {0.508454694, 0.341147609, 0.295862918, 0.548688903, 0.585658282, 0.897036451, 0.706331796, 0.135326779, 0.217908145, 0.130827714, 0.169613196, \
	0.196899094, 0.408287375, 0.430067168, 0.3610099454};
	//
	double b_0i[15] = {-0.122437481, 0.118865253, 0.211791277, -0.184988335, -0.175445631, -0.312762832, -0.201383713, -0.656481881, 0.374802991, -0.54110085, \
	-0.734453380, -0.899369679, -0.573115907, -0.394951619, -0.929961345};
	//
	double c_0i[15] = {0.405687236, -0.561959968, 0.204891789, 0.109246517, 0.151152472, 0.221637945, 0.192531300, 0.372683002, 0.197120216, 0.378305321, 0.445923746, \
	0.537929839, 0.0, 0.166347739, 0.983945693};
	//
	double d_0i[15] = {-0.280664253, 0.107812882, -0.443816939, -0.147640718, -0.232631055, -0.334936505, -0.290563680, -0.568965132, -0.303760697, -0.605147284, \
	-0.660231362, -0.808850378, 0.674723722, -0.216781312, 0.639960311};
	//
	double e_0i[15] = {0.0, -0.624860693, 0.284860938, 0.686263015, 0.123579199, 0.175513829, 0.146210667, 0.307112273, 0.0, 0.337474008, 0.337925101, 0.422221318, \
	-0.644106546, 0.112315817, -0.723090992};
	// A7
	double const b_l[10][3] = {
	{0.362490805, 0.799935189, 0.307478729},
	{0.304225816, 0.224958154, 0.278627337},
	{-0.996806883, 0.0, -0.867921570},
	{0.253400235, 0.897249966, 0.207829497},
	{-0.436583922, -0.170638899, -0.326893145},
	{0.532410093, 0.0, 0.362685631},
	{-0.426661039, 0.0, -0.269352543},
	{0.209057209, 0.0, 0.124806645},
	{-0.566103563, -0.237971658, -0.324300901},
	{0.649505677, 0.593339556, 0.360324299},
	};
	// A8
	double const pot[15][2] = {
	{3.6920, 166.28},
	{3.5923, 107.65},
	{3.7430, 251.85},
	{4.361, 243.4},
	{4.981, 269.4},
	{5.445, 300.9},
	{5.613, 259.0},
	{5.607, 394.9},
	{5.516, 409.4},
	{5.876, 450.1},
	{6.432, 433.8},
	{6.879, 422.9},
	{2.52, 775.0},
	{3.501, 385.0},
	{3.3925, 121.97},
	};
	// A9
	double const table9[15][3] = {
	{0.273268038, 1, 1},
	{-0.849620728, 1, 2},
	{0.112502989, 1, 3},
	{-0.633160558, 1, 4},
	{0.108980302, 1, 5},
	{0.147017803, 2, 1},
	{-0.117487692, 2, 2},
	{-0.134616968, 2, 4},
	{0.170047728, 2, 5},
	{0.801247296, 3, 4},
	{-0.919311560, 3, 5},
	{-0.948179500, 4, 1},
	{0.897246446, 5, 1},
	{-0.458434098, 5, 2},
	{0.297918757, 5, 5},
	};
	// A10
	short const delta_k[6] = { 1, 1, 0, 1, 0, 1 };
	double const d_ki[15][6] = {
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
	{0.2024316, 0.3826122, -0.2157778, -0.1220054, -0.4603520, -0.3560745},
	{-0.1094652, 0.2228633, 0.1291547, -0.1133854, -0.7923388, -0.7532740},
	{0.2018386, 0.1626172, 0.3170089, 1.543834, 0.2303893, 0.0},
	{-0.8825995, 0.1003515, 0.1234629, 0.0, 0.3209797, -0.4448295},
	{-0.6093508, 0.1555276, 0.3090944, -0.1277186, -0.1457833, 0.9089620},
	{0.2634994, 0.8370970, 0.1173177, -0.6472429, 0.4656508, -0.8480037},
	{0.2287271, 0.1429728, -0.8022675, 1.267256, 0.1463904, -1.819042},
	{0.6909138, 0.1510815, 0.2701853, 0.8456314, 0.0, -0.6520662},
	{0.1173601, -0.7006398, -0.1794561, -0.1127795, 0.0, -0.8766142},
	{0.7436489, -0.3729460, 0.1040860, -0.1185784, -0.1562911, 1.211149},
	{-0.5041879, -0.7050092, 0.0, -0.3011671, -0.9109962, -1.043269},
	{-0.3221958, 0.2147289, 1.584502, -0.1675186, 0.4457706, -0.6317586},
	{-0.1511477, 0.2562762, 0.3220416, -0.1838440, 0.2584963, -0.2339260},
	{-0.2261211, 0.2968558, 0.7572602, -0.1217539, -0.1964000, -0.2625900},
	};
	//
	printf("Enter the numbers of the components that are present in the mixture:\n 0 - Methan, 1 - Nitrogen, 2 - Carbon dioxide, 3 - Ethane, \
4 - Propane, 5 - n-Butane, 6 - i-Butane, 7 - n-Pentane,\n 8 - i-Pentane, 9 - Hexane, 10 - Heptane, 11 - Octane, 12 - Water vapor, \
13 - Hydrogen sulfide, 14 - Oxygen\n");
	// пример для сравнения
	const short N = 8;
	double T = 310; // 
	double p = 30; // 
	double const x_i[N] = { 51.981, 2.0562, 19.9859, 11.9785, 10.0038, 3.3027, 0.4948, 0.1971 };
	short const components[N] = { 0, 1, 2, 3, 4, 5, 7, 9 };
	// расчет псевдокритической плотности смеси (формулы 8-9)
	double v_cm = 0.0;
	double v_cij;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			v_cij = beta_v[components[i]][components[j]] * gamma_v[components[i]][components[j]] * (x_i[i] + x_i[j]) \
				/ (pow(beta_v[components[i]][components[j]], 2) * x_i[i] + x_i[j]) * pow((pow(1/Array[components[i]][1], 0.333333) + pow(1/Array[components[j]][1], 0.333333)), 3) / 8;
			v_cm += x_i[i] / 100 * x_i[j] / 100 * v_cij;
		}
	}
	printf("pseudocritical density = %f\n", 1 / v_cm);
	// расчет псевдокритической температуры смеси (формулы 10-11)
	double T_cm = 0.0; 
	double T_cij;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			T_cij = beta_T[components[i]][components[j]] * gamma_T[components[i]][components[j]] * (x_i[i] + x_i[j]) \
				/ (pow(beta_T[components[i]][components[j]], 2) * x_i[i] + x_i[j]) * pow(Array[components[i]][2] * Array[components[j]][2], 0.5);				
			T_cm += x_i[i]/100 * x_i[j]/100 * T_cij;
		}
	}
	printf("pseudocritical temperature = %f\n", T_cm); 
	//
	double Omega = 0.0;
	for (int i = 0; i < N; i++)	// нужно брать только те номера i, которые есть в смеси
		Omega += Array[components[i]][0] * x_i[i] / 100;	// расчет фактора Питцера (формула 32)
	printf("Pitzer factor of the mixture: %f\n", Omega);
	double M = 0.0;
	for (int i = 0; i < N; i++)	// нужно брать только те номера i, которые есть в смеси
		M += Array[components[i]][3] * x_i[i] / 100;	// расчет молярной массы смеси (формула 34)
	printf("Molar mass of the mixture: %f\n", M);
	// расчет псевдокритического фактора сжимаемости (формула 30)
	double z_cm;
	z_cm = 0.291 - 0.08 * Omega;
	printf("pseudocritical compresiibility factor = %f\n", z_cm);
	// расчет псевдокритического давления (формула 31)
	double p_cm;
	p_cm = 0.001 * 8.314472 / v_cm * T_cm * z_cm;
	printf("pseudocritical pressure = %f\n", p_cm);
	// метод Ньютона(считаем относительную плотность для каждой компоненты)
	double pi;
	double tau;
	pi = p / p_cm;
	tau = T / T_cm;
	double w;
	if (tau >= 1) {
		if (pi >= 1)
			w = 9 * pi * z_cm / tau / (1.1 * pi + 0.7);
		else
			w = pi * z_cm / tau;
	}
	else
		w = pi * z_cm / tau;
	double delta;
	double Sum;
	double SSum;
	double Sum1;
	double SSum1;
	double P0;
	double B0;
	double P1;
	double B1;
	short counter = 0;
	do {
		Sum = 0.0;
		SSum = 0.0;
		Sum1 = 0.0;
		SSum1 = 0.0;
		// расчетный комплекс А0
		for (int i = 0; i < N; i++) {
			P0 = 0;
			for (int k = 0; k < M_i[components[i]]; k++) {
				P0 += b[components[i]][k] * pow(w, r[components[i]][k]) * pow(tau, -t[components[i]][k]) * exp(g[components[i]][k] * pow(w, l[components[i]][k])) * \
					(r[components[i]][k] + g[components[i]][k] * pow(w, l[components[i]][k]) * l[components[i]][k]);
			}
			Sum += x_i[i] / 100 * P0;
		}
		printf("Sum = %f\n", Sum);
		for (int i = 0; i < N - 1; i++) {
			for (int j = i + 1; j < N; j++) {
				B0 = 0;
				for (int k = 0; k < M_ij[components[i]][components[j]]; k++) {
					B0 += c_ij[components[i]][components[j]][k] * pow(w, r_ij[components[i]][components[j]][k]) * pow(tau, -t_ij[components[i]][components[j]][k]) * \
					exp(-alpha_ij[components[i]][components[j]][k] * pow((w - eps_ij[components[i]][components[j]][k]), 2) - beta_ij[components[i]][components[j]][k] * \
					(w - gamma_ij[components[i]][components[j]][k])) * (r_ij[components[i]][components[j]][k] - 2 * alpha_ij[components[i]][components[j]][k] * \
					w * (w - eps_ij[components[i]][components[j]][k]) - w * beta_ij[components[i]][components[j]][k]);
				}
				SSum += x_i[i] / 100 * x_i[j] / 100 * Psi[components[i]][components[j]] * B0;
			}
		}
		printf("SSum = %f\n", SSum);
		// A0 = Sum + SSum
		// расчетный комплекс А1
		for (int i = 0; i < N; i++) {
			P1 = 0;
			for (int k = 0; k < M_i[components[i]]; k++) {
				P1 += b[components[i]][k] * pow(w, r[components[i]][k]) * pow(tau, -t[components[i]][k]) * exp(g[components[i]][k] * pow(w, l[components[i]][k])) * \
					((r[components[i]][k] + g[components[i]][k] * pow(w, l[components[i]][k]) * l[components[i]][k]) * (r[components[i]][k] + g[components[i]][k] * \
						pow(w, l[components[i]][k]) * l[components[i]][k] + 1) + g[components[i]][k] * pow(w, l[components[i]][k]) * pow(l[components[i]][k], 2));
			}
			Sum1 += x_i[i] / 100 * P1;
		}
		for (int i = 0; i < N - 1; i++) {
			for (int j = i + 1; j < N; j++) {
				B1 = 0;
				for (int k = 0; k < M_ij[components[i]][components[j]]; k++) {
					B1 += c_ij[components[i]][components[j]][k] * pow(w, r_ij[components[i]][components[j]][k]) * pow(tau, -t_ij[components[i]][components[j]][k]) * \
					exp(-alpha_ij[components[i]][components[j]][k] * pow((w - eps_ij[components[i]][components[j]][k]), 2) - beta_ij[components[i]][components[j]][k] * \
					(w - gamma_ij[components[i]][components[j]][k])) * ((r_ij[components[i]][components[j]][k] - 2 * alpha_ij[components[i]][components[j]][k] * \
					w * (w - eps_ij[components[i]][components[j]][k]) - w * beta_ij[components[i]][components[j]][k]) * (r_ij[components[i]][components[j]][k] - \
					2 * alpha_ij[components[i]][components[j]][k] * w * (w - eps_ij[components[i]][components[j]][k]) - w * beta_ij[components[i]][components[j]][k] + 1) \
					- 2 * alpha_ij[components[i]][components[j]][k] * w * (2 * w - eps_ij[components[i]][components[j]][k]) - w * beta_ij[components[i]][components[j]][k]);
				}
				SSum1 += x_i[i] / 100 * x_i[j] / 100 * Psi[components[i]][components[j]] * B1;
			}
		}
		// A1 = Sum1 + SSum1
		//
		delta = (pi * z_cm / tau - (1 + Sum + SSum) * w) / (1 + Sum1 + SSum1);
		printf("w = %.9f, delta = %.9f\n", w, delta);
		w = w + delta;
		counter += 1;
	} while (fabs(delta / w) > pow(10, -6));
	double rho;
	rho = M / v_cm * w;
	printf("rho = %f\n", rho);
	printf("iterations = %d\n", counter);
	double z;
	//
	w = 401.6 * v_cm / M;
	printf("w = %f\n", w);
	Sum = 0.0;
	SSum = 0.0;
	for (int i = 0; i < N; i++) {
		P0 = 0;
		short i_c = components[i];
		for (int k = 0; k < M_i[components[i]]; k++) {
			P0 += b[i_c][k] * pow(w, r[i_c][k]) * pow(tau, -t[i_c][k]) * exp(g[i_c][k] * pow(w, l[i_c][k])) * (r[i_c][k] + g[i_c][k] * pow(w, l[i_c][k]) * l[i_c][k]);
		}
		printf("P0 = %f\n", P0);
		Sum += x_i[i] / 100 * P0;
	}
	printf("Sum = %f\n", Sum);
	for (int i = 0; i < N - 1; i++) {
		for (int j = i + 1; j < N; j++) {
			B0 = 0;
			short i_c = components[i];
			short j_c = components[j];
			for (int k = 0; k < M_ij[components[i]][components[j]]; k++) {
				double teta_ij = pow(w, r_ij[i_c][j_c][k]) * pow(tau, -t_ij[i_c][j_c][k]) * \
					exp(-alpha_ij[i_c][j_c][k] * pow((w - eps_ij[i_c][j_c][k]), 2) - beta_ij[i_c][j_c][k] * (w - gamma_ij[i_c][j_c][k]));
				double X_ik = r_ij[i_c][j_c][k] - 2 * alpha_ij[i_c][j_c][k] * w * (w - eps_ij[i_c][j_c][k]) - beta_ij[i_c][j_c][k] * w;
				B0 += c_ij[i_c][j_c][k] * teta_ij * X_ik;
			}
			printf("B0 = %.10f, i = %d, j = %d\n", B0, i, j);
			SSum += x_i[i] / 100 * x_i[j] / 100 * Psi[i_c][j_c] * B0;
		}
	}
	printf("SSum = %f\n", SSum);
	//
	z = 1 + Sum + SSum; // фактор сжимаемости (формула 35)
	printf("compressibility factor = %f\n", z);
	double Sum2 = 0.0;
	double SSum2 = 0.0;
	double P2;
	double B2;
	// расчетный комплекс А2
	for (int i = 0; i < N; i++) {
		P2 = 0;
		for (int k = 0; k < M_i[components[i]]; k++) {
			P2 += b[components[i]][k] * pow(w, r[components[i]][k]) * pow(tau, -t[components[i]][k]) * exp(g[components[i]][k] * pow(w, l[components[i]][k])) * \
				(r[components[i]][k] + g[components[i]][k] * pow(w, l[components[i]][k]) * l[components[i]][k]) * (-t[components[i]][k] + 1);
		}
		Sum2 += x_i[i] / 100 * P2;
	}
	for (int i = 0; i < N - 1; i++) {
		for (int j = i + 1; j < N; j++) {
			B2 = 0;
			for (int k = 0; k < M_ij[components[i]][components[j]]; k++) {
				B2 += c_ij[components[i]][components[j]][k] * pow(w, r_ij[components[i]][components[j]][k]) * pow(tau, -t_ij[components[i]][components[j]][k]) * \
				exp(-alpha_ij[components[i]][components[j]][k] * pow((w - eps_ij[components[i]][components[j]][k]), 2) - beta_ij[components[i]][components[j]][k] * \
				(w - gamma_ij[components[i]][components[j]][k])) * (r_ij[components[i]][components[j]][k] - 2 * alpha_ij[components[i]][components[j]][k] * \
				w * (w - eps_ij[components[i]][components[j]][k]) - w * beta_ij[components[i]][components[j]][k]) * (-t_ij[components[i]][components[j]][k] + 1);
			}
			SSum2 += x_i[i] / 100 * x_i[j] / 100 * Psi[components[i]][components[j]] * B2;
		}
	}
	// A2 = Sum2 + SSum2
	double Sum3 = 0.0;
	double SSum3 = 0.0;
	double P3;
	double B3;
	// расчетный комплекс А3
	for (int i = 0; i < N; i++) {
		P3 = 0;
		for (int k = 0; k < M_i[components[i]]; k++) {
			P3 += -b[components[i]][k] * pow(w, r[components[i]][k]) * pow(tau, -t[components[i]][k]) * exp(g[components[i]][k] * pow(w, l[components[i]][k])) * \
				(-t[components[i]][k]) * (-t[components[i]][k] + 1);
		}
		Sum3 += x_i[i] / 100 * P3;
	}
	for (int i = 0; i < N - 1; i++) {
		for (int j = i + 1; j < N; j++) {
			B3 = 0;
			for (int k = 0; k < M_ij[components[i]][components[j]]; k++) {
				B3 += -c_ij[components[i]][components[j]][k] * pow(w, r_ij[components[i]][components[j]][k]) * pow(tau, -t_ij[components[i]][components[j]][k]) * \
					exp(-alpha_ij[components[i]][components[j]][k] * pow((w - eps_ij[components[i]][components[j]][k]), 2) - beta_ij[components[i]][components[j]][k] * \
						(w - gamma_ij[components[i]][components[j]][k])) * (-t_ij[components[i]][components[j]][k]) * (-t_ij[components[i]][components[j]][k] + 1);
			}
			SSum3 += x_i[i] / 100 * x_i[j] / 100 * Psi[components[i]][components[j]] * B3;
		}
	}
	// A3 = Sum3 + SSum3
	double c_p = 0.0;
	for (int i = 0; i < N; i++)	// нужно брать только те номера i, которые есть в смеси
		c_p += x_i[i] / 100 * (a_0i[components[i]] + b_0i[components[i]] * T/100 + c_0i[components[i]] * pow(T/100, 2) + d_0i[components[i]] \
			* pow(T/100, 3) + e_0i[components[i]] * pow(T/100, 4));	// изобарная теплоемкость смеси (формула 35)
	double ww;
	ww = pow(1000 * 8.314472 * T / M * (1 + Sum1 + SSum1 + pow((1 + Sum2 + SSum2), 2) / (c_p - 1 + Sum3 + SSum3)), 0.5); // скорость звука (формула 36)
	printf("sound speed = %f\n", ww);
	double kappa;
	kappa =(1 + Sum1 + SSum1 + pow((1 + Sum2 + SSum2), 2) / (c_p - 1 + Sum3 + SSum3)) / z; // показатель адиабаты (формула 37)
	printf("adiabatic exponent = %f\n", kappa);
	// расчет динамической вязкости(с водой по-другому!!!)
	double teta_m = (2.63094 * pow(M, 0.5) * pow(p_cm, 0.66666667)) / pow(T_cm, 0.166666667);
	double Omega_ij2[N][N], Omega_ij1[N][N]; 
	double mu[N][N];
	double** h = new double* [N + 1]; //Объявляем двумерный целочисленный динамический массив (матрицу)
	for (int i = 0; i < N + 1; i++) {
		h[i] = new double[N + 1];
	}
	double** g1 = new double* [N]; //Объявляем двумерный целочисленный динамический массив (матрицу)
	for (int i = 0; i < N; i++) {
		g1[i] = new double[N];
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			Omega_ij1[i][j] = 0;
			Omega_ij2[i][j] = 0;
			for (int l = 0; l < 10; l++) {
				Omega_ij1[i][j] += b_l[l][2] * pow(T / pow(pot[components[i]][1] * pot[components[j]][1], 0.5), -0.5*l);
				Omega_ij2[i][j] += b_l[l][0] * pow(T / pow(pot[components[i]][1] * pot[components[j]][1], 0.5), -0.5*l);
			}
			mu[i][j] = 2.6693 * pow(2 * Array[components[i]][3] * Array[components[j]][3] * T / (Array[components[i]][3] + Array[components[j]][3]), 0.5) / Omega_ij2[i][j] / \
				pow(0.5 * (pot[components[i]][0] + pot[components[j]][0]), 2);
			h[i][j] = -2 * x_i[i] / 100 * x_i[j] / 100 * Array[components[i]][3] * Array[components[j]][3] / mu[i][j] / pow(Array[components[i]][3] + Array[components[j]][3], 2) * \
				(5 / 3 * Omega_ij1[i][j] / Omega_ij2[i][j] - 1);
			g1[i][j] = h[i][j];
			h[i][N] = x_i[i] / 100;
		}
		h[i][i] = pow(x_i[i] / 100, 2) / mu[i][i];
		for (int k = 0; k < N; k++) {
			if (k != i) {
				h[i][i] += 2 * x_i[i] / 100 * x_i[k] / 100 * Array[components[i]][3] * Array[components[k]][3] / mu[i][k] / pow(Array[components[i]][3] + Array[components[k]][3], 2) * \
					(5/3 * Omega_ij1[i][k] / Omega_ij2[i][k] + (Array[components[k]][3] / Array[components[i]][3]));
			}
		}
		g1[i][i] = h[i][i];
	}
	for (int j = 0; j < N; j++) {
		h[N][j] = x_i[j] / 100;
	}
	h[N][N] = 0;
	/*for (int i = 0; i < N + 1; i++) {
		for (int j = 0; j < N + 1; j++) {
			cout << h[i][j] << " ";
		}
		cout << endl;
	}*/
	// считаем определитель...
	double mu0;
	mu0 = -det(h, N + 1) / det(g1, N);
	clearMemory(h, N + 1);
	clearMemory(g1, N);
	printf("mu0 = %f\n", mu0);
	double delta_mu = 0;
	double fi_km[6];
	for (int k = 0; k < 6; k++) {
		fi_km[k] = delta_k[k];
		for (int i = 0; i < N; i++) {
			fi_km[k] += x_i[i] / 100 * d_ki[components[i]][k]; // аффинные преобразования
		}
		printf(" %f\n", fi_km[k]);
	}
	//w = 1.0969 * v_cm / M;
	for (int n = 0; n < 15; n++) {
		delta_mu += table9[n][0] * pow(fi_km[0] * pow(w, fi_km[1]) * pow(tau, fi_km[2]), table9[n][1]) * pow(fi_km[3] * pow(w, fi_km[4]) * pow(tau, fi_km[5]), -table9[n][2]);
	}
	printf("delta_mu = %f\n", delta_mu);
	double mu_m;
	mu_m = mu0 + teta_m * delta_mu;
	printf("dynamic viscosity coefficient = %f\n", mu_m);
	return 0;
}